<?php
/**
 * This file is part of Railt package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * WARNING: This is generated file.
 * For update sources from grammar use Railt\Compiler\Parser::compileSources() method.
 */
declare(strict_types=1);

namespace Railt\Compiler\Parser;

class CompiledSDLParser extends \Railt\Parser\Llk\Parser
{
    public function __construct()
    {
        parent::__construct(
            [
                'default' => [
                    'T_NON_NULL'                               => '!',
                    'T_VAR'                                    => '\$',
                    'T_PARENTHESIS_OPEN'                       => '\(',
                    'T_PARENTHESIS_CLOSE'                      => '\)',
                    'T_THREE_DOTS'                             => '\.\.\.',
                    'T_COLON'                                  => ':',
                    'T_EQUAL'                                  => '=',
                    'T_DIRECTIVE_AT'                           => '@',
                    'T_BRACKET_OPEN'                           => '\[',
                    'T_BRACKET_CLOSE'                          => '\]',
                    'T_BRACE_OPEN'                             => '{',
                    'T_BRACE_CLOSE:default'                    => '}',
                    'T_OR'                                     => '\|',
                    'T_AND'                                    => '\&',
                    'T_ON'                                     => 'on\b',
                    'T_NUMBER_VALUE'                           => '\-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][\+\-]?[0-9]+)?\b',
                    'T_BOOL_TRUE'                              => 'true\b',
                    'T_BOOL_FALSE'                             => 'false\b',
                    'T_NULL'                                   => 'null\b',
                    'T_MULTILINE_STRING_OPEN:multiline_string' => '"""',
                    'T_STRING_OPEN:string'                     => '"',
                    'T_TYPE'                                   => 'type\b',
                    'T_TYPE_IMPLEMENTS'                        => 'implements\b',
                    'T_ENUM'                                   => 'enum\b',
                    'T_UNION'                                  => 'union\b',
                    'T_INTERFACE'                              => 'interface\b',
                    'T_SCHEMA'                                 => 'schema\b',
                    'T_SCHEMA_QUERY'                           => 'query\b',
                    'T_SCHEMA_MUTATION'                        => 'mutation\b',
                    'T_SCHEMA_SUBSCRIPTION'                    => 'subscription\b',
                    'T_SCALAR'                                 => 'scalar\b',
                    'T_DIRECTIVE'                              => 'directive\b',
                    'T_INPUT'                                  => 'input\b',
                    'T_EXTEND'                                 => 'extend\b',
                    'T_NAME'                                   => '([_A-Za-z][_0-9A-Za-z]*)',
                    'skip'                                     => '(?:(?:[\xfe\xff|\x20|\x09|\x0a|\x0d]+|#[^\n]*)|,)',
                ],
                'multiline_string' => [
                    'T_MULTILINE_STRING'               => '(?:\\\"""|(?!""").|\s)+',
                    'T_MULTILINE_STRING_CLOSE:default' => '"""',
                ],
                'string' => [
                    'T_STRING'               => '[^"\\\]+(\\\.[^"\\\]*)*',
                    'T_STRING_CLOSE:default' => '"',
                ],
            ],
            [
                'Document'                        => new \Railt\Parser\Llk\Rule\Concatenation('Document', ['Definitions'], '#Document'),
                1                                 => new \Railt\Parser\Llk\Rule\Repetition(1, 0, 0, 'ObjectDefinition', null),
                2                                 => new \Railt\Parser\Llk\Rule\Repetition(2, 0, 0, 'InterfaceDefinition', null),
                3                                 => new \Railt\Parser\Llk\Rule\Repetition(3, 0, 0, 'EnumDefinition', null),
                4                                 => new \Railt\Parser\Llk\Rule\Repetition(4, 0, 0, 'UnionDefinition', null),
                5                                 => new \Railt\Parser\Llk\Rule\Repetition(5, 0, 0, 'SchemaDefinition', null),
                6                                 => new \Railt\Parser\Llk\Rule\Repetition(6, 0, 0, 'ScalarDefinition', null),
                7                                 => new \Railt\Parser\Llk\Rule\Repetition(7, 0, 0, 'InputDefinition', null),
                8                                 => new \Railt\Parser\Llk\Rule\Repetition(8, 0, 0, 'ExtendDefinition', null),
                9                                 => new \Railt\Parser\Llk\Rule\Repetition(9, 0, 0, 'DirectiveDefinition', null),
                'Definitions'                     => new \Railt\Parser\Llk\Rule\Choice('Definitions', [1, 2, 3, 4, 5, 6, 7, 8, 9], null),
                11                                => new \Railt\Parser\Llk\Rule\Token(11, 'T_BOOL_TRUE', null, -1, true),
                12                                => new \Railt\Parser\Llk\Rule\Repetition(12, 0, 0, 11, null),
                13                                => new \Railt\Parser\Llk\Rule\Token(13, 'T_BOOL_FALSE', null, -1, true),
                14                                => new \Railt\Parser\Llk\Rule\Repetition(14, 0, 0, 13, null),
                15                                => new \Railt\Parser\Llk\Rule\Token(15, 'T_NULL', null, -1, true),
                16                                => new \Railt\Parser\Llk\Rule\Repetition(16, 0, 0, 15, null),
                'ValueKeyword'                    => new \Railt\Parser\Llk\Rule\Choice('ValueKeyword', [12, 14, 16], null),
                18                                => new \Railt\Parser\Llk\Rule\Token(18, 'T_ON', null, -1, true),
                19                                => new \Railt\Parser\Llk\Rule\Repetition(19, 0, 0, 18, null),
                20                                => new \Railt\Parser\Llk\Rule\Token(20, 'T_TYPE', null, -1, true),
                21                                => new \Railt\Parser\Llk\Rule\Repetition(21, 0, 0, 20, null),
                22                                => new \Railt\Parser\Llk\Rule\Token(22, 'T_TYPE_IMPLEMENTS', null, -1, true),
                23                                => new \Railt\Parser\Llk\Rule\Repetition(23, 0, 0, 22, null),
                24                                => new \Railt\Parser\Llk\Rule\Token(24, 'T_ENUM', null, -1, true),
                25                                => new \Railt\Parser\Llk\Rule\Repetition(25, 0, 0, 24, null),
                26                                => new \Railt\Parser\Llk\Rule\Token(26, 'T_UNION', null, -1, true),
                27                                => new \Railt\Parser\Llk\Rule\Repetition(27, 0, 0, 26, null),
                28                                => new \Railt\Parser\Llk\Rule\Token(28, 'T_INTERFACE', null, -1, true),
                29                                => new \Railt\Parser\Llk\Rule\Repetition(29, 0, 0, 28, null),
                30                                => new \Railt\Parser\Llk\Rule\Token(30, 'T_SCHEMA', null, -1, true),
                31                                => new \Railt\Parser\Llk\Rule\Repetition(31, 0, 0, 30, null),
                32                                => new \Railt\Parser\Llk\Rule\Token(32, 'T_SCHEMA_QUERY', null, -1, true),
                33                                => new \Railt\Parser\Llk\Rule\Repetition(33, 0, 0, 32, null),
                34                                => new \Railt\Parser\Llk\Rule\Token(34, 'T_SCHEMA_MUTATION', null, -1, true),
                35                                => new \Railt\Parser\Llk\Rule\Repetition(35, 0, 0, 34, null),
                36                                => new \Railt\Parser\Llk\Rule\Token(36, 'T_SCALAR', null, -1, true),
                37                                => new \Railt\Parser\Llk\Rule\Repetition(37, 0, 0, 36, null),
                38                                => new \Railt\Parser\Llk\Rule\Token(38, 'T_DIRECTIVE', null, -1, true),
                39                                => new \Railt\Parser\Llk\Rule\Repetition(39, 0, 0, 38, null),
                40                                => new \Railt\Parser\Llk\Rule\Token(40, 'T_INPUT', null, -1, true),
                41                                => new \Railt\Parser\Llk\Rule\Repetition(41, 0, 0, 40, null),
                42                                => new \Railt\Parser\Llk\Rule\Token(42, 'T_EXTEND', null, -1, true),
                43                                => new \Railt\Parser\Llk\Rule\Repetition(43, 0, 0, 42, null),
                'Keyword'                         => new \Railt\Parser\Llk\Rule\Choice('Keyword', [19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43], null),
                45                                => new \Railt\Parser\Llk\Rule\Token(45, 'T_NUMBER_VALUE', null, -1, true),
                'Number'                          => new \Railt\Parser\Llk\Rule\Repetition('Number', 0, 0, 45, null),
                47                                => new \Railt\Parser\Llk\Rule\Token(47, 'T_NULL', null, -1, true),
                'Nullable'                        => new \Railt\Parser\Llk\Rule\Repetition('Nullable', 0, 0, 47, null),
                49                                => new \Railt\Parser\Llk\Rule\Token(49, 'T_BOOL_TRUE', null, -1, true),
                50                                => new \Railt\Parser\Llk\Rule\Repetition(50, 0, 0, 49, null),
                51                                => new \Railt\Parser\Llk\Rule\Token(51, 'T_BOOL_FALSE', null, -1, true),
                52                                => new \Railt\Parser\Llk\Rule\Repetition(52, 0, 0, 51, null),
                'Boolean'                         => new \Railt\Parser\Llk\Rule\Choice('Boolean', [50, 52], null),
                54                                => new \Railt\Parser\Llk\Rule\Token(54, 'T_MULTILINE_STRING_OPEN', null, -1, false),
                55                                => new \Railt\Parser\Llk\Rule\Repetition(55, 0, 0, 54, null),
                56                                => new \Railt\Parser\Llk\Rule\Token(56, 'T_MULTILINE_STRING', null, -1, true),
                57                                => new \Railt\Parser\Llk\Rule\Repetition(57, 0, 0, 56, null),
                58                                => new \Railt\Parser\Llk\Rule\Token(58, 'T_MULTILINE_STRING_CLOSE', null, -1, false),
                59                                => new \Railt\Parser\Llk\Rule\Repetition(59, 0, 0, 58, null),
                60                                => new \Railt\Parser\Llk\Rule\Concatenation(60, [55, 57, 59], null),
                61                                => new \Railt\Parser\Llk\Rule\Repetition(61, 0, 0, 60, null),
                62                                => new \Railt\Parser\Llk\Rule\Token(62, 'T_STRING_OPEN', null, -1, false),
                63                                => new \Railt\Parser\Llk\Rule\Repetition(63, 0, 0, 62, null),
                64                                => new \Railt\Parser\Llk\Rule\Token(64, 'T_STRING', null, -1, true),
                65                                => new \Railt\Parser\Llk\Rule\Repetition(65, 0, 0, 64, null),
                66                                => new \Railt\Parser\Llk\Rule\Token(66, 'T_STRING_CLOSE', null, -1, false),
                67                                => new \Railt\Parser\Llk\Rule\Repetition(67, 0, 0, 66, null),
                68                                => new \Railt\Parser\Llk\Rule\Concatenation(68, [63, 65, 67], null),
                69                                => new \Railt\Parser\Llk\Rule\Repetition(69, 0, 0, 68, null),
                'String'                          => new \Railt\Parser\Llk\Rule\Choice('String', [61, 69], null),
                71                                => new \Railt\Parser\Llk\Rule\Token(71, 'T_NAME', null, -1, true),
                72                                => new \Railt\Parser\Llk\Rule\Repetition(72, 0, 0, 71, null),
                73                                => new \Railt\Parser\Llk\Rule\Repetition(73, 0, 0, 'ValueKeyword', null),
                'Word'                            => new \Railt\Parser\Llk\Rule\Choice('Word', [72, 73], null),
                75                                => new \Railt\Parser\Llk\Rule\Repetition(75, 0, 0, 'Word', null),
                'Name'                            => new \Railt\Parser\Llk\Rule\Concatenation('Name', [75], '#Name'),
                77                                => new \Railt\Parser\Llk\Rule\Repetition(77, 0, 0, 'String', null),
                78                                => new \Railt\Parser\Llk\Rule\Repetition(78, 0, 0, 'Word', null),
                79                                => new \Railt\Parser\Llk\Rule\Repetition(79, 0, 0, 'Keyword', null),
                80                                => new \Railt\Parser\Llk\Rule\Choice(80, [77, 78, 79], null),
                81                                => new \Railt\Parser\Llk\Rule\Repetition(81, 0, 0, 80, null),
                'Key'                             => new \Railt\Parser\Llk\Rule\Concatenation('Key', [81], '#Name'),
                83                                => new \Railt\Parser\Llk\Rule\Repetition(83, 0, 0, 'String', null),
                84                                => new \Railt\Parser\Llk\Rule\Repetition(84, 0, 0, 'Number', null),
                85                                => new \Railt\Parser\Llk\Rule\Repetition(85, 0, 0, 'Nullable', null),
                86                                => new \Railt\Parser\Llk\Rule\Repetition(86, 0, 0, 'Keyword', null),
                87                                => new \Railt\Parser\Llk\Rule\Repetition(87, 0, 0, 'Object', null),
                88                                => new \Railt\Parser\Llk\Rule\Repetition(88, 0, 0, 'List', null),
                89                                => new \Railt\Parser\Llk\Rule\Repetition(89, 0, 0, 'Word', null),
                90                                => new \Railt\Parser\Llk\Rule\Choice(90, [83, 84, 85, 86, 87, 88, 89], null),
                91                                => new \Railt\Parser\Llk\Rule\Repetition(91, 0, 0, 90, null),
                'Value'                           => new \Railt\Parser\Llk\Rule\Concatenation('Value', [91], '#Value'),
                93                                => new \Railt\Parser\Llk\Rule\Concatenation(93, ['ValueDefinitionResolver'], null),
                'ValueDefinition'                 => new \Railt\Parser\Llk\Rule\Repetition('ValueDefinition', 0, 0, 93, null),
                95                                => new \Railt\Parser\Llk\Rule\Repetition(95, 0, 0, 'ValueListDefinition', null),
                96                                => new \Railt\Parser\Llk\Rule\Token(96, 'T_NON_NULL', null, -1, true),
                97                                => new \Railt\Parser\Llk\Rule\Concatenation(97, [95, 96], '#List'),
                98                                => new \Railt\Parser\Llk\Rule\Repetition(98, 0, 0, 97, null),
                99                                => new \Railt\Parser\Llk\Rule\Repetition(99, 0, 0, 'ValueScalarDefinition', null),
                100                               => new \Railt\Parser\Llk\Rule\Token(100, 'T_NON_NULL', null, -1, true),
                101                               => new \Railt\Parser\Llk\Rule\Concatenation(101, [99, 100], '#Type'),
                102                               => new \Railt\Parser\Llk\Rule\Repetition(102, 0, 0, 101, null),
                'ValueDefinitionResolver'         => new \Railt\Parser\Llk\Rule\Choice('ValueDefinitionResolver', [98, 102], null),
                104                               => new \Railt\Parser\Llk\Rule\Token(104, 'T_BRACKET_OPEN', null, -1, false),
                105                               => new \Railt\Parser\Llk\Rule\Repetition(105, 0, 0, 104, null),
                106                               => new \Railt\Parser\Llk\Rule\Repetition(106, 0, 0, 'ValueScalarDefinition', null),
                107                               => new \Railt\Parser\Llk\Rule\Token(107, 'T_NON_NULL', null, -1, true),
                108                               => new \Railt\Parser\Llk\Rule\Concatenation(108, [106, 107], '#Type'),
                109                               => new \Railt\Parser\Llk\Rule\Repetition(109, 0, 0, 108, null),
                110                               => new \Railt\Parser\Llk\Rule\Token(110, 'T_BRACKET_CLOSE', null, -1, false),
                111                               => new \Railt\Parser\Llk\Rule\Repetition(111, 0, 0, 110, null),
                'ValueListDefinition'             => new \Railt\Parser\Llk\Rule\Concatenation('ValueListDefinition', [105, 109, 111], null),
                113                               => new \Railt\Parser\Llk\Rule\Repetition(113, 0, 0, 'Keyword', null),
                114                               => new \Railt\Parser\Llk\Rule\Repetition(114, 0, 0, 'Word', null),
                'ValueScalarDefinition'           => new \Railt\Parser\Llk\Rule\Choice('ValueScalarDefinition', [113, 114], null),
                116                               => new \Railt\Parser\Llk\Rule\Token(116, 'T_BRACE_OPEN', null, -1, false),
                117                               => new \Railt\Parser\Llk\Rule\Repetition(117, 0, 0, 116, null),
                118                               => new \Railt\Parser\Llk\Rule\Token(118, 'T_BRACE_CLOSE', null, -1, false),
                119                               => new \Railt\Parser\Llk\Rule\Repetition(119, 0, 0, 118, null),
                'Object'                          => new \Railt\Parser\Llk\Rule\Concatenation('Object', [117, 'ObjectPair', 119], '#Object'),
                121                               => new \Railt\Parser\Llk\Rule\Repetition(121, 0, 0, 'Key', null),
                122                               => new \Railt\Parser\Llk\Rule\Token(122, 'T_COLON', null, -1, false),
                123                               => new \Railt\Parser\Llk\Rule\Repetition(123, 0, 0, 122, null),
                124                               => new \Railt\Parser\Llk\Rule\Repetition(124, 0, 0, 'Value', null),
                'ObjectPair'                      => new \Railt\Parser\Llk\Rule\Concatenation('ObjectPair', [121, 123, 124], '#ObjectPair'),
                126                               => new \Railt\Parser\Llk\Rule\Token(126, 'T_BRACKET_OPEN', null, -1, false),
                127                               => new \Railt\Parser\Llk\Rule\Repetition(127, 0, 0, 126, null),
                128                               => new \Railt\Parser\Llk\Rule\Token(128, 'T_BRACKET_CLOSE', null, -1, false),
                129                               => new \Railt\Parser\Llk\Rule\Repetition(129, 0, 0, 128, null),
                'List'                            => new \Railt\Parser\Llk\Rule\Concatenation('List', [127, 'Value', 129], '#List'),
                131                               => new \Railt\Parser\Llk\Rule\Token(131, 'T_MULTILINE_STRING_OPEN', null, -1, false),
                132                               => new \Railt\Parser\Llk\Rule\Repetition(132, 0, 0, 131, null),
                133                               => new \Railt\Parser\Llk\Rule\Token(133, 'T_MULTILINE_STRING', null, -1, true),
                134                               => new \Railt\Parser\Llk\Rule\Repetition(134, 0, 0, 133, null),
                135                               => new \Railt\Parser\Llk\Rule\Token(135, 'T_MULTILINE_STRING_CLOSE', null, -1, false),
                136                               => new \Railt\Parser\Llk\Rule\Repetition(136, 0, 0, 135, null),
                137                               => new \Railt\Parser\Llk\Rule\Concatenation(137, [132, 134, 136], null),
                138                               => new \Railt\Parser\Llk\Rule\Repetition(138, 0, 0, 137, null),
                'Documentation'                   => new \Railt\Parser\Llk\Rule\Concatenation('Documentation', [138], '#Description'),
                140                               => new \Railt\Parser\Llk\Rule\Token(140, 'T_SCHEMA', null, -1, false),
                141                               => new \Railt\Parser\Llk\Rule\Repetition(141, 0, 0, 140, null),
                142                               => new \Railt\Parser\Llk\Rule\Token(142, 'T_BRACE_OPEN', null, -1, false),
                143                               => new \Railt\Parser\Llk\Rule\Repetition(143, 0, 0, 142, null),
                144                               => new \Railt\Parser\Llk\Rule\Repetition(144, 0, 0, 'SchemaDefinitionBody', null),
                145                               => new \Railt\Parser\Llk\Rule\Token(145, 'T_BRACE_CLOSE', null, -1, false),
                146                               => new \Railt\Parser\Llk\Rule\Repetition(146, 0, 0, 145, null),
                'SchemaDefinition'                => new \Railt\Parser\Llk\Rule\Concatenation('SchemaDefinition', ['Documentation', 141, 'Directive', 143, 144, 146], '#SchemaDefinition'),
                148                               => new \Railt\Parser\Llk\Rule\Repetition(148, 0, 0, 'SchemaDefinitionQuery', null),
                149                               => new \Railt\Parser\Llk\Rule\Repetition(149, 0, 0, 'SchemaDefinitionMutation', null),
                150                               => new \Railt\Parser\Llk\Rule\Repetition(150, 0, 0, 'SchemaDefinitionSubscription', null),
                'SchemaDefinitionBody'            => new \Railt\Parser\Llk\Rule\Choice('SchemaDefinitionBody', [148, 149, 150], null),
                152                               => new \Railt\Parser\Llk\Rule\Token(152, 'T_SCHEMA_QUERY', null, -1, false),
                153                               => new \Railt\Parser\Llk\Rule\Repetition(153, 0, 0, 152, null),
                154                               => new \Railt\Parser\Llk\Rule\Token(154, 'T_COLON', null, -1, false),
                155                               => new \Railt\Parser\Llk\Rule\Repetition(155, 0, 0, 154, null),
                156                               => new \Railt\Parser\Llk\Rule\Repetition(156, 0, 0, 'SchemaDefinitionFieldValue', null),
                'SchemaDefinitionQuery'           => new \Railt\Parser\Llk\Rule\Concatenation('SchemaDefinitionQuery', ['Documentation', 153, 155, 156], '#Query'),
                158                               => new \Railt\Parser\Llk\Rule\Token(158, 'T_SCHEMA_MUTATION', null, -1, false),
                159                               => new \Railt\Parser\Llk\Rule\Repetition(159, 0, 0, 158, null),
                160                               => new \Railt\Parser\Llk\Rule\Token(160, 'T_COLON', null, -1, false),
                161                               => new \Railt\Parser\Llk\Rule\Repetition(161, 0, 0, 160, null),
                162                               => new \Railt\Parser\Llk\Rule\Repetition(162, 0, 0, 'SchemaDefinitionFieldValue', null),
                'SchemaDefinitionMutation'        => new \Railt\Parser\Llk\Rule\Concatenation('SchemaDefinitionMutation', ['Documentation', 159, 161, 162], '#Mutation'),
                164                               => new \Railt\Parser\Llk\Rule\Token(164, 'T_SCHEMA_SUBSCRIPTION', null, -1, false),
                165                               => new \Railt\Parser\Llk\Rule\Repetition(165, 0, 0, 164, null),
                166                               => new \Railt\Parser\Llk\Rule\Token(166, 'T_COLON', null, -1, false),
                167                               => new \Railt\Parser\Llk\Rule\Repetition(167, 0, 0, 166, null),
                168                               => new \Railt\Parser\Llk\Rule\Repetition(168, 0, 0, 'SchemaDefinitionFieldValue', null),
                'SchemaDefinitionSubscription'    => new \Railt\Parser\Llk\Rule\Concatenation('SchemaDefinitionSubscription', ['Documentation', 165, 167, 168], '#Subscription'),
                170                               => new \Railt\Parser\Llk\Rule\Repetition(170, 0, 0, 'ValueDefinition', null),
                'SchemaDefinitionFieldValue'      => new \Railt\Parser\Llk\Rule\Concatenation('SchemaDefinitionFieldValue', [170, 'Directive'], null),
                172                               => new \Railt\Parser\Llk\Rule\Token(172, 'T_SCALAR', null, -1, false),
                173                               => new \Railt\Parser\Llk\Rule\Repetition(173, 0, 0, 172, null),
                174                               => new \Railt\Parser\Llk\Rule\Repetition(174, 0, 0, 'Name', null),
                'ScalarDefinition'                => new \Railt\Parser\Llk\Rule\Concatenation('ScalarDefinition', ['Documentation', 173, 174, 'Directive'], '#ScalarDefinition'),
                176                               => new \Railt\Parser\Llk\Rule\Token(176, 'T_INPUT', null, -1, false),
                177                               => new \Railt\Parser\Llk\Rule\Repetition(177, 0, 0, 176, null),
                178                               => new \Railt\Parser\Llk\Rule\Repetition(178, 0, 0, 'Name', null),
                179                               => new \Railt\Parser\Llk\Rule\Token(179, 'T_BRACE_OPEN', null, -1, false),
                180                               => new \Railt\Parser\Llk\Rule\Repetition(180, 0, 0, 179, null),
                181                               => new \Railt\Parser\Llk\Rule\Token(181, 'T_BRACE_CLOSE', null, -1, false),
                182                               => new \Railt\Parser\Llk\Rule\Repetition(182, 0, 0, 181, null),
                'InputDefinition'                 => new \Railt\Parser\Llk\Rule\Concatenation('InputDefinition', ['Documentation', 177, 178, 'Directive', 180, 'InputDefinitionField', 182], '#InputDefinition'),
                184                               => new \Railt\Parser\Llk\Rule\Repetition(184, 0, 0, 'Key', null),
                185                               => new \Railt\Parser\Llk\Rule\Token(185, 'T_COLON', null, -1, false),
                186                               => new \Railt\Parser\Llk\Rule\Repetition(186, 0, 0, 185, null),
                187                               => new \Railt\Parser\Llk\Rule\Repetition(187, 0, 0, 'ValueDefinition', null),
                188                               => new \Railt\Parser\Llk\Rule\Concatenation(188, [184, 186, 187, 'InputDefinitionDefaultValue', 'Directive'], null),
                189                               => new \Railt\Parser\Llk\Rule\Repetition(189, 0, 0, 188, null),
                'InputDefinitionField'            => new \Railt\Parser\Llk\Rule\Concatenation('InputDefinitionField', ['Documentation', 189], '#Argument'),
                191                               => new \Railt\Parser\Llk\Rule\Token(191, 'T_EQUAL', null, -1, false),
                192                               => new \Railt\Parser\Llk\Rule\Repetition(192, 0, 0, 191, null),
                193                               => new \Railt\Parser\Llk\Rule\Repetition(193, 0, 0, 'Value', null),
                'InputDefinitionDefaultValue'     => new \Railt\Parser\Llk\Rule\Concatenation('InputDefinitionDefaultValue', [192, 193], null),
                195                               => new \Railt\Parser\Llk\Rule\Token(195, 'T_EXTEND', null, -1, false),
                196                               => new \Railt\Parser\Llk\Rule\Repetition(196, 0, 0, 195, null),
                197                               => new \Railt\Parser\Llk\Rule\Repetition(197, 0, 0, 'ObjectDefinition', null),
                198                               => new \Railt\Parser\Llk\Rule\Concatenation(198, [197], '#ExtendDefinition'),
                199                               => new \Railt\Parser\Llk\Rule\Repetition(199, 0, 0, 'InterfaceDefinition', null),
                200                               => new \Railt\Parser\Llk\Rule\Concatenation(200, [199], '#ExtendDefinition'),
                201                               => new \Railt\Parser\Llk\Rule\Repetition(201, 0, 0, 'EnumDefinition', null),
                202                               => new \Railt\Parser\Llk\Rule\Concatenation(202, [201], '#ExtendDefinition'),
                203                               => new \Railt\Parser\Llk\Rule\Repetition(203, 0, 0, 'UnionDefinition', null),
                204                               => new \Railt\Parser\Llk\Rule\Concatenation(204, [203], '#ExtendDefinition'),
                205                               => new \Railt\Parser\Llk\Rule\Repetition(205, 0, 0, 'SchemaDefinition', null),
                206                               => new \Railt\Parser\Llk\Rule\Concatenation(206, [205], '#ExtendDefinition'),
                207                               => new \Railt\Parser\Llk\Rule\Repetition(207, 0, 0, 'ScalarDefinition', null),
                208                               => new \Railt\Parser\Llk\Rule\Concatenation(208, [207], '#ExtendDefinition'),
                209                               => new \Railt\Parser\Llk\Rule\Repetition(209, 0, 0, 'InputDefinition', null),
                210                               => new \Railt\Parser\Llk\Rule\Concatenation(210, [209], '#ExtendDefinition'),
                211                               => new \Railt\Parser\Llk\Rule\Repetition(211, 0, 0, 'DirectiveDefinition', null),
                212                               => new \Railt\Parser\Llk\Rule\Concatenation(212, [211], '#ExtendDefinition'),
                213                               => new \Railt\Parser\Llk\Rule\Choice(213, [198, 200, 202, 204, 206, 208, 210, 212], null),
                214                               => new \Railt\Parser\Llk\Rule\Repetition(214, 0, 0, 213, null),
                'ExtendDefinition'                => new \Railt\Parser\Llk\Rule\Concatenation('ExtendDefinition', ['Documentation', 196, 214], null),
                216                               => new \Railt\Parser\Llk\Rule\Token(216, 'T_DIRECTIVE', null, -1, false),
                217                               => new \Railt\Parser\Llk\Rule\Repetition(217, 0, 0, 216, null),
                218                               => new \Railt\Parser\Llk\Rule\Token(218, 'T_DIRECTIVE_AT', null, -1, false),
                219                               => new \Railt\Parser\Llk\Rule\Repetition(219, 0, 0, 218, null),
                220                               => new \Railt\Parser\Llk\Rule\Repetition(220, 0, 0, 'Name', null),
                221                               => new \Railt\Parser\Llk\Rule\Token(221, 'T_ON', null, -1, false),
                222                               => new \Railt\Parser\Llk\Rule\Repetition(222, 0, 0, 221, null),
                'DirectiveDefinition'             => new \Railt\Parser\Llk\Rule\Concatenation('DirectiveDefinition', ['Documentation', 217, 219, 220, 'DirectiveDefinitionArguments', 222, 'DirectiveDefinitionTargets'], '#DirectiveDefinition'),
                224                               => new \Railt\Parser\Llk\Rule\Token(224, 'T_PARENTHESIS_OPEN', null, -1, false),
                225                               => new \Railt\Parser\Llk\Rule\Repetition(225, 0, 0, 224, null),
                226                               => new \Railt\Parser\Llk\Rule\Token(226, 'T_PARENTHESIS_CLOSE', null, -1, false),
                227                               => new \Railt\Parser\Llk\Rule\Repetition(227, 0, 0, 226, null),
                'DirectiveDefinitionArguments'    => new \Railt\Parser\Llk\Rule\Concatenation('DirectiveDefinitionArguments', [225, 'DirectiveDefinitionArgument', 227], null),
                229                               => new \Railt\Parser\Llk\Rule\Repetition(229, 0, 0, 'Key', null),
                230                               => new \Railt\Parser\Llk\Rule\Token(230, 'T_COLON', null, -1, false),
                231                               => new \Railt\Parser\Llk\Rule\Repetition(231, 0, 0, 230, null),
                232                               => new \Railt\Parser\Llk\Rule\Repetition(232, 0, 0, 'ValueDefinition', null),
                'DirectiveDefinitionArgument'     => new \Railt\Parser\Llk\Rule\Concatenation('DirectiveDefinitionArgument', ['Documentation', 229, 231, 232, 'DirectiveDefinitionDefaultValue', 'Directive'], '#Argument'),
                234                               => new \Railt\Parser\Llk\Rule\Repetition(234, 0, 0, 'Key', null),
                235                               => new \Railt\Parser\Llk\Rule\Token(235, 'T_OR', null, -1, false),
                236                               => new \Railt\Parser\Llk\Rule\Repetition(236, 0, 0, 235, null),
                237                               => new \Railt\Parser\Llk\Rule\Repetition(237, 0, 0, 'Key', null),
                238                               => new \Railt\Parser\Llk\Rule\Concatenation(238, [236, 237], null),
                'DirectiveDefinitionTargets'      => new \Railt\Parser\Llk\Rule\Concatenation('DirectiveDefinitionTargets', [234, 238], '#Target'),
                240                               => new \Railt\Parser\Llk\Rule\Token(240, 'T_EQUAL', null, -1, false),
                241                               => new \Railt\Parser\Llk\Rule\Repetition(241, 0, 0, 240, null),
                242                               => new \Railt\Parser\Llk\Rule\Repetition(242, 0, 0, 'Value', null),
                'DirectiveDefinitionDefaultValue' => new \Railt\Parser\Llk\Rule\Concatenation('DirectiveDefinitionDefaultValue', [241, 242], null),
                244                               => new \Railt\Parser\Llk\Rule\Token(244, 'T_TYPE', null, -1, false),
                245                               => new \Railt\Parser\Llk\Rule\Repetition(245, 0, 0, 244, null),
                246                               => new \Railt\Parser\Llk\Rule\Repetition(246, 0, 0, 'Name', null),
                247                               => new \Railt\Parser\Llk\Rule\Token(247, 'T_BRACE_OPEN', null, -1, false),
                248                               => new \Railt\Parser\Llk\Rule\Repetition(248, 0, 0, 247, null),
                249                               => new \Railt\Parser\Llk\Rule\Token(249, 'T_BRACE_CLOSE', null, -1, false),
                250                               => new \Railt\Parser\Llk\Rule\Repetition(250, 0, 0, 249, null),
                'ObjectDefinition'                => new \Railt\Parser\Llk\Rule\Concatenation('ObjectDefinition', ['Documentation', 245, 246, 'ObjectDefinitionImplements', 'Directive', 248, 'ObjectDefinitionField', 250], '#ObjectDefinition'),
                252                               => new \Railt\Parser\Llk\Rule\Token(252, 'T_TYPE_IMPLEMENTS', null, -1, false),
                253                               => new \Railt\Parser\Llk\Rule\Repetition(253, 0, 0, 252, null),
                254                               => new \Railt\Parser\Llk\Rule\Token(254, 'T_AND', null, -1, false),
                255                               => new \Railt\Parser\Llk\Rule\Repetition(255, 0, 0, 254, null),
                256                               => new \Railt\Parser\Llk\Rule\Repetition(256, 0, 0, 'Key', null),
                257                               => new \Railt\Parser\Llk\Rule\Concatenation(257, [255, 256], null),
                'ObjectDefinitionImplements'      => new \Railt\Parser\Llk\Rule\Concatenation('ObjectDefinitionImplements', [253, 'Key', 257], '#Implements'),
                259                               => new \Railt\Parser\Llk\Rule\Repetition(259, 0, 0, 'Key', null),
                260                               => new \Railt\Parser\Llk\Rule\Token(260, 'T_COLON', null, -1, false),
                261                               => new \Railt\Parser\Llk\Rule\Repetition(261, 0, 0, 260, null),
                262                               => new \Railt\Parser\Llk\Rule\Repetition(262, 0, 0, 'ObjectDefinitionFieldValue', null),
                263                               => new \Railt\Parser\Llk\Rule\Concatenation(263, [259, 'Arguments', 261, 262], null),
                264                               => new \Railt\Parser\Llk\Rule\Repetition(264, 0, 0, 263, null),
                'ObjectDefinitionField'           => new \Railt\Parser\Llk\Rule\Concatenation('ObjectDefinitionField', ['Documentation', 264], '#Field'),
                266                               => new \Railt\Parser\Llk\Rule\Repetition(266, 0, 0, 'ValueDefinition', null),
                'ObjectDefinitionFieldValue'      => new \Railt\Parser\Llk\Rule\Concatenation('ObjectDefinitionFieldValue', [266, 'Directive'], null),
                268                               => new \Railt\Parser\Llk\Rule\Token(268, 'T_INTERFACE', null, -1, false),
                269                               => new \Railt\Parser\Llk\Rule\Repetition(269, 0, 0, 268, null),
                270                               => new \Railt\Parser\Llk\Rule\Repetition(270, 0, 0, 'Name', null),
                271                               => new \Railt\Parser\Llk\Rule\Token(271, 'T_BRACE_OPEN', null, -1, false),
                272                               => new \Railt\Parser\Llk\Rule\Repetition(272, 0, 0, 271, null),
                273                               => new \Railt\Parser\Llk\Rule\Token(273, 'T_BRACE_CLOSE', null, -1, false),
                274                               => new \Railt\Parser\Llk\Rule\Repetition(274, 0, 0, 273, null),
                'InterfaceDefinition'             => new \Railt\Parser\Llk\Rule\Concatenation('InterfaceDefinition', ['Documentation', 269, 270, 'Directive', 272, 'InterfaceDefinitionBody', 274], '#InterfaceDefinition'),
                276                               => new \Railt\Parser\Llk\Rule\Repetition(276, 0, 0, 'InterfaceDefinitionFieldKey', null),
                277                               => new \Railt\Parser\Llk\Rule\Token(277, 'T_COLON', null, -1, false),
                278                               => new \Railt\Parser\Llk\Rule\Repetition(278, 0, 0, 277, null),
                279                               => new \Railt\Parser\Llk\Rule\Repetition(279, 0, 0, 'ValueDefinition', null),
                280                               => new \Railt\Parser\Llk\Rule\Concatenation(280, [276, 278, 279, 'Directive'], null),
                281                               => new \Railt\Parser\Llk\Rule\Repetition(281, 0, 0, 280, null),
                'InterfaceDefinitionBody'         => new \Railt\Parser\Llk\Rule\Concatenation('InterfaceDefinitionBody', [281], '#Field'),
                283                               => new \Railt\Parser\Llk\Rule\Repetition(283, 0, 0, 'Key', null),
                'InterfaceDefinitionFieldKey'     => new \Railt\Parser\Llk\Rule\Concatenation('InterfaceDefinitionFieldKey', ['Documentation', 283, 'Arguments'], null),
                285                               => new \Railt\Parser\Llk\Rule\Token(285, 'T_ENUM', null, -1, false),
                286                               => new \Railt\Parser\Llk\Rule\Repetition(286, 0, 0, 285, null),
                287                               => new \Railt\Parser\Llk\Rule\Repetition(287, 0, 0, 'Name', null),
                288                               => new \Railt\Parser\Llk\Rule\Token(288, 'T_BRACE_OPEN', null, -1, false),
                289                               => new \Railt\Parser\Llk\Rule\Repetition(289, 0, 0, 288, null),
                290                               => new \Railt\Parser\Llk\Rule\Token(290, 'T_BRACE_CLOSE', null, -1, false),
                291                               => new \Railt\Parser\Llk\Rule\Repetition(291, 0, 0, 290, null),
                'EnumDefinition'                  => new \Railt\Parser\Llk\Rule\Concatenation('EnumDefinition', ['Documentation', 286, 287, 'Directive', 289, 'EnumField', 291], '#EnumDefinition'),
                293                               => new \Railt\Parser\Llk\Rule\Repetition(293, 0, 0, 'EnumValue', null),
                294                               => new \Railt\Parser\Llk\Rule\Concatenation(294, [293, 'Directive'], null),
                295                               => new \Railt\Parser\Llk\Rule\Repetition(295, 0, 0, 294, null),
                'EnumField'                       => new \Railt\Parser\Llk\Rule\Concatenation('EnumField', ['Documentation', 295], '#Value'),
                297                               => new \Railt\Parser\Llk\Rule\Token(297, 'T_NAME', null, -1, true),
                298                               => new \Railt\Parser\Llk\Rule\Repetition(298, 0, 0, 297, null),
                299                               => new \Railt\Parser\Llk\Rule\Repetition(299, 0, 0, 'Keyword', null),
                300                               => new \Railt\Parser\Llk\Rule\Choice(300, [298, 299], null),
                301                               => new \Railt\Parser\Llk\Rule\Repetition(301, 0, 0, 300, null),
                'EnumValue'                       => new \Railt\Parser\Llk\Rule\Concatenation('EnumValue', [301], '#Name'),
                303                               => new \Railt\Parser\Llk\Rule\Token(303, 'T_UNION', null, -1, false),
                304                               => new \Railt\Parser\Llk\Rule\Repetition(304, 0, 0, 303, null),
                305                               => new \Railt\Parser\Llk\Rule\Repetition(305, 0, 0, 'Name', null),
                306                               => new \Railt\Parser\Llk\Rule\Token(306, 'T_EQUAL', null, -1, false),
                307                               => new \Railt\Parser\Llk\Rule\Repetition(307, 0, 0, 306, null),
                308                               => new \Railt\Parser\Llk\Rule\Repetition(308, 0, 0, 'UnionBody', null),
                'UnionDefinition'                 => new \Railt\Parser\Llk\Rule\Concatenation('UnionDefinition', ['Documentation', 304, 305, 'Directive', 307, 308], '#UnionDefinition'),
                310                               => new \Railt\Parser\Llk\Rule\Token(310, 'T_OR', null, -1, false),
                'UnionBody'                       => new \Railt\Parser\Llk\Rule\Concatenation('UnionBody', [310, 'UnionUnitesList'], '#Relations'),
                312                               => new \Railt\Parser\Llk\Rule\Repetition(312, 0, 0, 'Name', null),
                313                               => new \Railt\Parser\Llk\Rule\Token(313, 'T_OR', null, -1, false),
                314                               => new \Railt\Parser\Llk\Rule\Repetition(314, 0, 0, 313, null),
                315                               => new \Railt\Parser\Llk\Rule\Repetition(315, 0, 0, 'Name', null),
                316                               => new \Railt\Parser\Llk\Rule\Concatenation(316, [314, 315], null),
                'UnionUnitesList'                 => new \Railt\Parser\Llk\Rule\Concatenation('UnionUnitesList', [312, 316], null),
                318                               => new \Railt\Parser\Llk\Rule\Token(318, 'T_PARENTHESIS_OPEN', null, -1, false),
                319                               => new \Railt\Parser\Llk\Rule\Repetition(319, 0, 0, 318, null),
                320                               => new \Railt\Parser\Llk\Rule\Token(320, 'T_PARENTHESIS_CLOSE', null, -1, false),
                321                               => new \Railt\Parser\Llk\Rule\Repetition(321, 0, 0, 320, null),
                'Arguments'                       => new \Railt\Parser\Llk\Rule\Concatenation('Arguments', [319, 'ArgumentPair', 321], null),
                323                               => new \Railt\Parser\Llk\Rule\Repetition(323, 0, 0, 'Key', null),
                324                               => new \Railt\Parser\Llk\Rule\Token(324, 'T_COLON', null, -1, false),
                325                               => new \Railt\Parser\Llk\Rule\Repetition(325, 0, 0, 324, null),
                326                               => new \Railt\Parser\Llk\Rule\Repetition(326, 0, 0, 'ValueDefinition', null),
                'ArgumentPair'                    => new \Railt\Parser\Llk\Rule\Concatenation('ArgumentPair', ['Documentation', 323, 325, 326, 'ArgumentDefaultValue', 'Directive'], '#Argument'),
                328                               => new \Railt\Parser\Llk\Rule\Repetition(328, 0, 0, 'ValueDefinition', null),
                'ArgumentValue'                   => new \Railt\Parser\Llk\Rule\Concatenation('ArgumentValue', [328], '#Type'),
                330                               => new \Railt\Parser\Llk\Rule\Token(330, 'T_EQUAL', null, -1, false),
                331                               => new \Railt\Parser\Llk\Rule\Repetition(331, 0, 0, 330, null),
                332                               => new \Railt\Parser\Llk\Rule\Repetition(332, 0, 0, 'Value', null),
                'ArgumentDefaultValue'            => new \Railt\Parser\Llk\Rule\Concatenation('ArgumentDefaultValue', [331, 332], null),
                334                               => new \Railt\Parser\Llk\Rule\Token(334, 'T_DIRECTIVE_AT', null, -1, false),
                335                               => new \Railt\Parser\Llk\Rule\Repetition(335, 0, 0, 334, null),
                336                               => new \Railt\Parser\Llk\Rule\Repetition(336, 0, 0, 'Name', null),
                'Directive'                       => new \Railt\Parser\Llk\Rule\Concatenation('Directive', [335, 336, 'DirectiveArguments'], '#Directive'),
                338                               => new \Railt\Parser\Llk\Rule\Token(338, 'T_PARENTHESIS_OPEN', null, -1, false),
                339                               => new \Railt\Parser\Llk\Rule\Repetition(339, 0, 0, 338, null),
                340                               => new \Railt\Parser\Llk\Rule\Token(340, 'T_PARENTHESIS_CLOSE', null, -1, false),
                341                               => new \Railt\Parser\Llk\Rule\Repetition(341, 0, 0, 340, null),
                'DirectiveArguments'              => new \Railt\Parser\Llk\Rule\Concatenation('DirectiveArguments', [339, 'DirectiveArgumentPair', 341], null),
                343                               => new \Railt\Parser\Llk\Rule\Repetition(343, 0, 0, 'Key', null),
                344                               => new \Railt\Parser\Llk\Rule\Token(344, 'T_COLON', null, -1, false),
                345                               => new \Railt\Parser\Llk\Rule\Repetition(345, 0, 0, 344, null),
                346                               => new \Railt\Parser\Llk\Rule\Repetition(346, 0, 0, 'Value', null),
                'DirectiveArgumentPair'           => new \Railt\Parser\Llk\Rule\Concatenation('DirectiveArgumentPair', [343, 345, 346], '#Argument'),
            ],
            [
            ]
        );

        $this->getRule('Document')->setDefaultId('#Document');
        $this->getRule('Document')->setPPRepresentation(' Definitions()*');
        $this->getRule('Definitions')->setPPRepresentation(' ObjectDefinition() | InterfaceDefinition() | EnumDefinition() | UnionDefinition() | SchemaDefinition() | ScalarDefinition() | InputDefinition() | ExtendDefinition() | DirectiveDefinition()');
        $this->getRule('ValueKeyword')->setPPRepresentation(' <T_BOOL_TRUE> | <T_BOOL_FALSE> | <T_NULL>');
        $this->getRule('Keyword')->setPPRepresentation(' <T_ON> | <T_TYPE> | <T_TYPE_IMPLEMENTS> | <T_ENUM> | <T_UNION> | <T_INTERFACE> | <T_SCHEMA> | <T_SCHEMA_QUERY> | <T_SCHEMA_MUTATION> | <T_SCALAR> | <T_DIRECTIVE> | <T_INPUT> | <T_EXTEND>');
        $this->getRule('Number')->setPPRepresentation(' <T_NUMBER_VALUE>');
        $this->getRule('Nullable')->setPPRepresentation(' <T_NULL>');
        $this->getRule('Boolean')->setPPRepresentation(' <T_BOOL_TRUE> | <T_BOOL_FALSE>');
        $this->getRule('String')->setPPRepresentation(' (::T_MULTILINE_STRING_OPEN:: <T_MULTILINE_STRING> ::T_MULTILINE_STRING_CLOSE::) | (::T_STRING_OPEN:: <T_STRING> ::T_STRING_CLOSE::)');
        $this->getRule('Word')->setPPRepresentation(' <T_NAME> | ValueKeyword()');
        $this->getRule('Name')->setPPRepresentation(' Word() #Name');
        $this->getRule('Key')->setPPRepresentation(' ( String() | Word() | Keyword() ) #Name');
        $this->getRule('Value')->setPPRepresentation(' ( String() | Number() | Nullable() | Keyword() | Object() | List() | Word() ) #Value');
        $this->getRule('ValueDefinition')->setPPRepresentation(' ValueDefinitionResolver()');
        $this->getRule('ValueDefinitionResolver')->setPPRepresentation(' (ValueListDefinition() <T_NON_NULL>? #List) | (ValueScalarDefinition() <T_NON_NULL>? #Type)');
        $this->getRule('ValueListDefinition')->setPPRepresentation(' ::T_BRACKET_OPEN:: (ValueScalarDefinition() <T_NON_NULL>? #Type) ::T_BRACKET_CLOSE::');
        $this->getRule('ValueScalarDefinition')->setPPRepresentation(' Keyword() | Word()');
        $this->getRule('Object')->setPPRepresentation(' ::T_BRACE_OPEN:: ObjectPair()* ::T_BRACE_CLOSE:: #Object');
        $this->getRule('ObjectPair')->setPPRepresentation(' Key() ::T_COLON:: Value() #ObjectPair');
        $this->getRule('List')->setPPRepresentation(' ::T_BRACKET_OPEN:: Value()* ::T_BRACKET_CLOSE:: #List');
        $this->getRule('Documentation')->setPPRepresentation(' ( ::T_MULTILINE_STRING_OPEN:: <T_MULTILINE_STRING> ::T_MULTILINE_STRING_CLOSE:: ) #Description');
        $this->getRule('SchemaDefinition')->setDefaultId('#SchemaDefinition');
        $this->getRule('SchemaDefinition')->setPPRepresentation(' Documentation()? ::T_SCHEMA:: Directive()* ::T_BRACE_OPEN:: SchemaDefinitionBody() ::T_BRACE_CLOSE::');
        $this->getRule('SchemaDefinitionBody')->setPPRepresentation(' ( SchemaDefinitionQuery() | SchemaDefinitionMutation() | SchemaDefinitionSubscription() )*');
        $this->getRule('SchemaDefinitionQuery')->setPPRepresentation(' Documentation()? ::T_SCHEMA_QUERY:: ::T_COLON:: SchemaDefinitionFieldValue() #Query');
        $this->getRule('SchemaDefinitionMutation')->setPPRepresentation(' Documentation()? ::T_SCHEMA_MUTATION:: ::T_COLON:: SchemaDefinitionFieldValue() #Mutation');
        $this->getRule('SchemaDefinitionSubscription')->setPPRepresentation(' Documentation()? ::T_SCHEMA_SUBSCRIPTION:: ::T_COLON:: SchemaDefinitionFieldValue() #Subscription');
        $this->getRule('SchemaDefinitionFieldValue')->setPPRepresentation(' ValueDefinition() Directive()*');
        $this->getRule('ScalarDefinition')->setDefaultId('#ScalarDefinition');
        $this->getRule('ScalarDefinition')->setPPRepresentation(' Documentation()? ::T_SCALAR:: Name() Directive()*');
        $this->getRule('InputDefinition')->setDefaultId('#InputDefinition');
        $this->getRule('InputDefinition')->setPPRepresentation(' Documentation()? ::T_INPUT:: Name() Directive()* ::T_BRACE_OPEN:: InputDefinitionField()* ::T_BRACE_CLOSE::');
        $this->getRule('InputDefinitionField')->setPPRepresentation(' Documentation()? ( Key() ::T_COLON:: ValueDefinition() InputDefinitionDefaultValue()? Directive()* ) #Argument');
        $this->getRule('InputDefinitionDefaultValue')->setPPRepresentation(' ::T_EQUAL:: Value()');
        $this->getRule('ExtendDefinition')->setDefaultId('#ExtendDefinition');
        $this->getRule('ExtendDefinition')->setPPRepresentation(' Documentation()? ::T_EXTEND:: ( ObjectDefinition() | InterfaceDefinition() | EnumDefinition() | UnionDefinition() | SchemaDefinition() | ScalarDefinition() | InputDefinition() | DirectiveDefinition() )');
        $this->getRule('DirectiveDefinition')->setDefaultId('#DirectiveDefinition');
        $this->getRule('DirectiveDefinition')->setPPRepresentation(' Documentation()? ::T_DIRECTIVE:: ::T_DIRECTIVE_AT:: Name() DirectiveDefinitionArguments()* ::T_ON:: DirectiveDefinitionTargets()+');
        $this->getRule('DirectiveDefinitionArguments')->setPPRepresentation(' ::T_PARENTHESIS_OPEN:: DirectiveDefinitionArgument()* ::T_PARENTHESIS_CLOSE::');
        $this->getRule('DirectiveDefinitionArgument')->setPPRepresentation(' Documentation()? Key() ::T_COLON:: ValueDefinition() DirectiveDefinitionDefaultValue()? Directive()* #Argument');
        $this->getRule('DirectiveDefinitionTargets')->setPPRepresentation(' Key() (::T_OR:: Key())* #Target');
        $this->getRule('DirectiveDefinitionDefaultValue')->setPPRepresentation(' ::T_EQUAL:: Value()');
        $this->getRule('ObjectDefinition')->setDefaultId('#ObjectDefinition');
        $this->getRule('ObjectDefinition')->setPPRepresentation(' Documentation()? ::T_TYPE:: Name() ObjectDefinitionImplements()? Directive()* ::T_BRACE_OPEN:: ObjectDefinitionField()* ::T_BRACE_CLOSE::');
        $this->getRule('ObjectDefinitionImplements')->setPPRepresentation(' ::T_TYPE_IMPLEMENTS:: Key()* ( ::T_AND:: Key() )? #Implements');
        $this->getRule('ObjectDefinitionField')->setPPRepresentation(' Documentation()? ( Key() Arguments()? ::T_COLON:: ObjectDefinitionFieldValue() ) #Field');
        $this->getRule('ObjectDefinitionFieldValue')->setPPRepresentation(' ValueDefinition() Directive()*');
        $this->getRule('InterfaceDefinition')->setDefaultId('#InterfaceDefinition');
        $this->getRule('InterfaceDefinition')->setPPRepresentation(' Documentation()? ::T_INTERFACE:: Name() Directive()* ::T_BRACE_OPEN:: InterfaceDefinitionBody()* ::T_BRACE_CLOSE::');
        $this->getRule('InterfaceDefinitionBody')->setPPRepresentation(' ( InterfaceDefinitionFieldKey() ::T_COLON:: ValueDefinition() Directive()* ) #Field');
        $this->getRule('InterfaceDefinitionFieldKey')->setPPRepresentation(' Documentation()? Key() Arguments()?');
        $this->getRule('EnumDefinition')->setDefaultId('#EnumDefinition');
        $this->getRule('EnumDefinition')->setPPRepresentation(' Documentation()? ::T_ENUM:: Name() Directive()* ::T_BRACE_OPEN:: EnumField()* ::T_BRACE_CLOSE::');
        $this->getRule('EnumField')->setPPRepresentation(' Documentation()? ( EnumValue() Directive()* ) #Value');
        $this->getRule('EnumValue')->setPPRepresentation(' ( <T_NAME> | Keyword() ) #Name');
        $this->getRule('UnionDefinition')->setDefaultId('#UnionDefinition');
        $this->getRule('UnionDefinition')->setPPRepresentation(' Documentation()? ::T_UNION:: Name() Directive()* ::T_EQUAL:: UnionBody()');
        $this->getRule('UnionBody')->setPPRepresentation(' ::T_OR::? UnionUnitesList()+ #Relations');
        $this->getRule('UnionUnitesList')->setPPRepresentation(' Name() (::T_OR:: Name())*');
        $this->getRule('Arguments')->setPPRepresentation(' ::T_PARENTHESIS_OPEN:: ArgumentPair()* ::T_PARENTHESIS_CLOSE::');
        $this->getRule('ArgumentPair')->setPPRepresentation(' Documentation()? Key() ::T_COLON:: ValueDefinition() ArgumentDefaultValue()? Directive()* #Argument');
        $this->getRule('ArgumentValue')->setPPRepresentation(' ValueDefinition() #Type');
        $this->getRule('ArgumentDefaultValue')->setPPRepresentation(' ::T_EQUAL:: Value()');
        $this->getRule('Directive')->setDefaultId('#Directive');
        $this->getRule('Directive')->setPPRepresentation(' ::T_DIRECTIVE_AT:: Name() DirectiveArguments()?');
        $this->getRule('DirectiveArguments')->setPPRepresentation(' ::T_PARENTHESIS_OPEN:: DirectiveArgumentPair()* ::T_PARENTHESIS_CLOSE::');
        $this->getRule('DirectiveArgumentPair')->setPPRepresentation(' Key() ::T_COLON:: Value() #Argument');
    }
}
