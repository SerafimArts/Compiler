/**
 * --------------------------------------------------------------------------
 *  PP2 Grammar
 * --------------------------------------------------------------------------
 *
 * This file provides PP2 language grammar for PP2
 *
 */

%skip T_WHITESPACE             (\xfe\xff|\x20|\x09|\x0a|\x0d)+
%skip T_COMMENT                //[^\\n]*
%skip T_BLOCK_COMMENT          /\*.*?\*/

%token T_PRAGMA                 %pragma\h+([\w\.]+)\h+([^\s]+)
%token T_INCLUDE                %include\h+([^\s]+)
%token T_TOKEN                  %token\h+(\w+)\h+([^\s]+)
%token T_SKIP                   %skip\h+(\w+)\h+([^\s]+)
%token T_OR                     \|
%token T_ZERO_OR_ONE            \?
%token T_ONE_OR_MORE            \+
%token T_ZERO_OR_MORE           \*
%token T_SKIPPED                ::(\w+)::
%token T_KEPT                   <(\w+)>
%token T_INVOKE                 (\w+)\(\)
%token T_GROUP_OPEN             \(
%token T_GROUP_CLOSE            \)
%token T_REPETITION_OPEN        {
%token T_REPETITION_CLOSE       }
%token T_COMMA                  ,
%token T_NUMBER                 \d+
%token T_KEPT_NAME              #
%token T_NAME                   [a-zA-Z_\x7f-\xff\\][a-zA-Z0-9_\x7f-\xff\\]*
%token T_COLON                  :
%token T_DELEGATE               \->


%pragma parser.lookahead 256
%pragma parser.root Grammar


#Grammar: __definitions()*

__definitions
  : Pragma()
  | Token()
  | Include()
  | Rule()

#Pragma: <T_PRAGMA>

#Token
  : <T_TOKEN>
  | <T_SKIP>

#Include: <T_INCLUDE>

#Rule: RuleName() RuleProduction()

RuleName: ShouldKeep()? <T_NAME> RuleDelegate()? ::T_COLON:: #Name

RuleDelegate: ::T_DELEGATE:: <T_NAME> #Delegate

#ShouldKeep: ::T_KEPT_NAME::

RuleProduction: RuleProductionBody()+ #Production

RuleProductionBody
  : Concatenation()
  | Alternation()
  | Repetition()
  | Production()
  | Rename()

#Rename: ::T_KEPT_NAME:: <T_NAME>

Production
  : Terminal()
  | Group()

Group: ::T_GROUP_OPEN:: RuleProductionBody()+ ::T_GROUP_CLOSE::

Terminal
  : <T_KEPT>
  | <T_SKIPPED>
  | <T_INVOKE>

#Concatenation: Production(){2,}

#Repetition: Production()+ RepetitionInterval()

#RepetitionInterval
  : <T_ZERO_OR_ONE>
  | <T_ONE_OR_MORE>
  | <T_ZERO_OR_MORE>
  | RepetitionIntervalBody()

RepetitionIntervalBody
  : ::T_REPETITION_OPEN::
    (
        RepetitionIntervalValues()
      | RepetitionIntervalRepeat()
    )
  ::T_REPETITION_CLOSE::

RepetitionIntervalValues: RepetitionIntervalFrom()? ::T_COMMA:: RepetitionIntervalTo()?

RepetitionIntervalRepeat: <T_NUMBER> #Repeat

RepetitionIntervalFrom: <T_NUMBER> #From

RepetitionIntervalTo: <T_NUMBER> #To

#Alternation
  : (Concatenation() | Production()) (::T_OR:: (Concatenation() | Production()))+
