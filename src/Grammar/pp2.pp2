%skip T_WHITESPACE             (\xfe\xff|\x20|\x09|\x0a|\x0d)+
%skip T_COMMENT                //[^\n]*
%skip T_BLOCK_COMMENT          /\*.*?\*/

%token T_PRAGMA                 %pragma\h+([\w\.]+)\h+([^\s]+)
%token T_INCLUDE                %include\h+([^\s]+)
%token T_TOKEN                  %token\h+(\w+)\h+([^\s]+)
%token T_SKIP                   %skip\h+(\w+)\h+([^\s]+)
%token T_OR                     \|
%token T_ZERO_OR_ONE            \?
%token T_ONE_OR_MORE            \+
%token T_ZERO_OR_MORE           \*
%token T_TOKEN_SKIPPED          ::(\w+)::
%token T_TOKEN_KEPT             <(\w+)>
%token T_TOKEN_STRING           ("[^"\\]+(\\.[^"\\]*)*"|'[^'\\]+(\\.[^'\\]*)*')
%token T_INVOKE                 (\w+)\(\)
%token T_GROUP_OPEN             \(
%token T_GROUP_CLOSE            \)
%token T_BLOCK_OPEN             {
%token T_BLOCK_CLOSE            }
%token T_COMMA                  ,
%token T_NUMBER                 \d+
%token T_KEPT_NAME              #
%token T_NAME                   [a-zA-Z_\x7f-\xff\\][a-zA-Z0-9_\x7f-\xff\\]*
%token T_EQ                     ::=
%token T_COLON                  :
%token T_DELEGATE               \->


%pragma parser.lookahead 256
%pragma parser.root Grammar


#Grammar:
    __definition()*

__definition:
    TokenDefinition() | PragmaDefinition() | IncludeDefinition() | RuleDefinition()

/**
 * Definitions structure
 */

#TokenDefinition:
    <T_TOKEN> | <T_SKIP>

#PragmaDefinition:
    <T_PRAGMA>

#IncludeDefinition:
    <T_INCLUDE>

#RuleDefinition:
    RuleName() RuleProduction()


// --------- Rule Name ---------------------------

#RuleName:
    ShouldKeep()? <T_NAME> RuleDelegate()? RuleProductionDelimiter()

#RuleDelegate:
    ::T_DELEGATE:: <T_NAME>

#ShouldKeep:
    ::T_KEPT_NAME::

RuleProductionDelimiter:
    ::T_COLON:: | ::T_EQ::


// --------- Rule Production ---------------------------

#RuleProduction:
    __production()+

__terminal:
    RuleProductionTerminal() | RuleGroup()

#RuleProductionTerminal:
    <T_TOKEN_SKIPPED> | <T_TOKEN_KEPT> | <T_INVOKE> | <T_TOKEN_STRING>

#RuleGroup:
  ::T_GROUP_OPEN:: __production()+ ::T_GROUP_CLOSE::

__production:
    RuleProductionAlternation() | RuleProductionRepetition() | RuleProductionConcatenation() | RuleRename()

#RuleRename:
    ::T_KEPT_NAME:: <T_NAME>

/**
 * -------------------------- Choice --------------------------
 */

#RuleProductionAlternation:
    __terminal() (::T_OR:: __terminal())+

/**
 * -------------------------- Concat --------------------------
 */

#RuleProductionConcatenation:
    __terminal()+

/**
 * -------------------------- Repeat --------------------------
 */

#RuleProductionRepetition:
    __terminal() RepetitionInterval()

#RepetitionInterval:
    <T_ZERO_OR_ONE> | <T_ONE_OR_MORE> | <T_ZERO_OR_MORE> | RepetitionIntervalBody()

RepetitionIntervalBody:
    ::T_BLOCK_OPEN:: (
        RepetitionIntervalValues() | RepetitionIntervalRepeat()
    ) ::T_BLOCK_CLOSE::

RepetitionIntervalValues:
    RepetitionIntervalFrom()? ::T_COMMA:: RepetitionIntervalTo()?

RepetitionIntervalRepeat:
    <T_NUMBER> #Repeat

RepetitionIntervalFrom:
    <T_NUMBER> #From

RepetitionIntervalTo:
    <T_NUMBER> #To
